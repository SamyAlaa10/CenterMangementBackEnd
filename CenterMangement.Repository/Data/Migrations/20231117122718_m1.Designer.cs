// <auto-generated />
using System;
using CenterMangement.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CenterMangement.Repository.Data.Migrations
{
    [DbContext(typeof(CenterMangementContext))]
    [Migration("20231117122718_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CenterMangement.Core.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccountNavigationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdGrade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PriceDefault")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("filePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNavigationId");

                    b.HasIndex("IdGrade");

                    b.HasIndex("IdUser");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Center", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccountNavigationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdCenter")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNavigationId");

                    b.HasIndex("IdCenter");

                    b.HasIndex("IdUser");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.LectureHell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccountNavigationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdCenter")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNavigationId");

                    b.HasIndex("IdCenter");

                    b.HasIndex("IdUser");

                    b.ToTable("LectureHells");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("BuyBook")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateBook")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCome")
                        .HasColumnType("datetime2");

                    b.Property<float>("GradeValue")
                        .HasColumnType("real");

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint");

                    b.Property<long>("IdStudent")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Payee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PayeeBook")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdSession");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdUser");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Payee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Permeation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Permeations");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelBookSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdBook")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdSession");

                    b.HasIndex("IdUser");

                    b.ToTable("RelBooksSessions");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelPermeationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdPermeation")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdPermeation");

                    b.HasIndex("IdUser");

                    b.ToTable("RelPermeationsUsers");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelSessionVideo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdSession");

                    b.HasIndex("IdUser");

                    b.ToTable("RelSessionsVideos");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelUserCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdCenter")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdCenter");

                    b.HasIndex("IdUser");

                    b.ToTable("RelUsersCenters");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndSession")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdGrade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdLectureHell")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSubject")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTeatcher")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nots")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PercentTeatcher")
                        .HasColumnType("real");

                    b.Property<decimal>("PriceSubject")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("countStudent")
                        .HasColumnType("int");

                    b.Property<DateTime>("startSession")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdGrade");

                    b.HasIndex("IdLectureHell");

                    b.HasIndex("IdSubject");

                    b.HasIndex("IdTeatcher");

                    b.HasIndex("IdUser");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdGrade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdParent")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdGrade");

                    b.HasIndex("IdParent");

                    b.HasIndex("IdUser");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccountNavigationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdGrade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceDefault")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNavigationId");

                    b.HasIndex("IdGrade");

                    b.HasIndex("IdUser");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Teatcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PercentDefault")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("Teatchers");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdAccount")
                        .HasColumnType("bigint");

                    b.Property<string>("JopTittle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Book", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany()
                        .HasForeignKey("AccountNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Grade", "GradeNavigation")
                        .WithMany("BooksNavigation")
                        .HasForeignKey("IdGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("BooksNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("GradeNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Center", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("CentersNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("CenterNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Grade", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany()
                        .HasForeignKey("AccountNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Center", "CenterNavigation")
                        .WithMany("GradesNavigation")
                        .HasForeignKey("IdCenter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("GradesNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("CenterNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.LectureHell", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany()
                        .HasForeignKey("AccountNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Center", "CenterNavigation")
                        .WithMany("LectureHellsNavigation")
                        .HasForeignKey("IdCenter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("LectureHellNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("CenterNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Log", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Session", "SessionNavigation")
                        .WithMany("LogsNavigation")
                        .HasForeignKey("IdSession")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Student", "StudentNavigation")
                        .WithMany("LogsNavigation")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("LogsNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SessionNavigation");

                    b.Navigation("StudentNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Parent", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("ParentsNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("ParentsNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Payment", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("paymentsNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelBookSession", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Book", "BookNavigation")
                        .WithMany("RelBookSessions")
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Session", "SessionNavigation")
                        .WithMany("RelBookSessions")
                        .HasForeignKey("IdSession")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("RelBooksSessionsNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookNavigation");

                    b.Navigation("SessionNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelPermeationUser", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Permeation", "PermeationNavigation")
                        .WithMany("RelPermeationUserNavigation")
                        .HasForeignKey("IdPermeation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("RelPermeationsUsersNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermeationNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelSessionVideo", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Session", "SessionNavigation")
                        .WithMany("RelSessionVideosNavigation")
                        .HasForeignKey("IdSession")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("RelSessionVideosNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SessionNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.RelUserCenter", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Center", "CenterNavigation")
                        .WithMany("RelUsersCentersNavigation")
                        .HasForeignKey("IdCenter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("RelUsersCentersNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CenterNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Session", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("SessionsNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Grade", "GradeNavigation")
                        .WithMany("SessionsNavigation")
                        .HasForeignKey("IdGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.LectureHell", "LectureHellNavigation")
                        .WithMany("SessionsNavigation")
                        .HasForeignKey("IdLectureHell")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Subject", "SubjectNavigation")
                        .WithMany("SessionsNavigation")
                        .HasForeignKey("IdSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Teatcher", "TeatcherNavigation")
                        .WithMany("SessionsNavigation")
                        .HasForeignKey("IdTeatcher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("SessionsNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("GradeNavigation");

                    b.Navigation("LectureHellNavigation");

                    b.Navigation("SubjectNavigation");

                    b.Navigation("TeatcherNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Student", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("StudentsNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Grade", "GradeNavigation")
                        .WithMany("StudentsNavigation")
                        .HasForeignKey("IdGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Parent", "ParentNavigation")
                        .WithMany("StudentsNavigation")
                        .HasForeignKey("IdParent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("StudentsNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("GradeNavigation");

                    b.Navigation("ParentNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Subject", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany()
                        .HasForeignKey("AccountNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.Grade", "GradeNavigation")
                        .WithMany("SubjectsNavigation")
                        .HasForeignKey("IdGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("SubjectsNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("GradeNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Teatcher", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("TeatchersNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CenterMangement.Core.Entities.User", "UserNavigation")
                        .WithMany("TeatchersNavigation")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.User", b =>
                {
                    b.HasOne("CenterMangement.Core.Entities.Account", "AccountNavigation")
                        .WithMany("UsersNavigation")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Account", b =>
                {
                    b.Navigation("CentersNavigation");

                    b.Navigation("ParentsNavigation");

                    b.Navigation("SessionsNavigation");

                    b.Navigation("StudentsNavigation");

                    b.Navigation("TeatchersNavigation");

                    b.Navigation("UsersNavigation");

                    b.Navigation("paymentsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Book", b =>
                {
                    b.Navigation("RelBookSessions");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Center", b =>
                {
                    b.Navigation("GradesNavigation");

                    b.Navigation("LectureHellsNavigation");

                    b.Navigation("RelUsersCentersNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Grade", b =>
                {
                    b.Navigation("BooksNavigation");

                    b.Navigation("SessionsNavigation");

                    b.Navigation("StudentsNavigation");

                    b.Navigation("SubjectsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.LectureHell", b =>
                {
                    b.Navigation("SessionsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Parent", b =>
                {
                    b.Navigation("StudentsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Permeation", b =>
                {
                    b.Navigation("RelPermeationUserNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Session", b =>
                {
                    b.Navigation("LogsNavigation");

                    b.Navigation("RelBookSessions");

                    b.Navigation("RelSessionVideosNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Student", b =>
                {
                    b.Navigation("LogsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Subject", b =>
                {
                    b.Navigation("SessionsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.Teatcher", b =>
                {
                    b.Navigation("SessionsNavigation");
                });

            modelBuilder.Entity("CenterMangement.Core.Entities.User", b =>
                {
                    b.Navigation("BooksNavigation");

                    b.Navigation("CenterNavigation");

                    b.Navigation("GradesNavigation");

                    b.Navigation("LectureHellNavigation");

                    b.Navigation("LogsNavigation");

                    b.Navigation("ParentsNavigation");

                    b.Navigation("RelBooksSessionsNavigation");

                    b.Navigation("RelPermeationsUsersNavigation");

                    b.Navigation("RelSessionVideosNavigation");

                    b.Navigation("RelUsersCentersNavigation");

                    b.Navigation("SessionsNavigation");

                    b.Navigation("StudentsNavigation");

                    b.Navigation("SubjectsNavigation");

                    b.Navigation("TeatchersNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
